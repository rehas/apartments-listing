Phase1 - Backend

 + SetUp TypeScript
 + SetUp Koa Server
 + SetUp Postgres / Docker
 + SetUp TypeORM

Phase2 - Client

 + SetUp React - App
 + Add redux / redux thunk - superagent - redux-devtools
 - Design Layout
  + Login / SignUp Page
    + Check if JWT expired and redirect to login!
    + Form simple layout and simple functionality
    + Form actual signup / login process
    + Form layout fix in grid
    + Login / Signup success process
      + Redirect to another page
      + Handle enter button submit. 
      + Show the logout button
        +implement logout functionality
          + redirect to login page after logout
          + clear user JWT data
      + SHow the user name and user type
        + Create an api enpoint to get current user details
    + Client code refactor
  - Apartmens / Maps Layout
    + Create path on the client side
    + Design layout with grid structure
    + Create components for
      + list
        + Create cards for each apartment
        + Make cards snap on to list with grid
        + make pagination => pagination on server side
      + Map
        TODO=> Make map start focus on the average of pins
        + Learn to show a map on react
        + Show the map
        + show the markers
          TODO=> Show differnt color if not available
      - Add / Edit Apartments
        + Fix button position on card
        + Check user type eligibility
          + If client, send to logout
          + Else show apartment details
            + Edit Button makes form data editable
            + Edit button summons save button
            TODO=> Delete button alerts and then deletes, and then sends the user back to apartments
    + Filtering -> Decide server side or client side. -> Server Side better
      + Make sure only 5 apartents are returned from backend
      + Take filtering options in backend (default by ID reversed)
      + Put- filtering dropdown menus - buttons - input fields
        + size
          + 0 - 50m2
          + 51 - 100m2
          + 101 - 150m2
          + 151 + m2 
        + price
          + 0 - 500 €
          + 501 - 1000 €
          + 1000 - 1500€
          + 1501+ ‹ 
        + number of rooms
          + 0-1
          + 2-3
          + 3+
  - Edit / Delete / Create Apartment screen
      + Set the path
      + Form Component for edit / delete
        + redirect from list
        + Display the form
          + name 
          + description 
          + floor_area_size 
          + price_per_month 
          + number_of_rooms 
          + available 
          + lat  
          + lon
        + Show it prefilled
        + Validations on input
        + Cancel button sends back to list
        + After save, cancel button becomes back to list
      + Create Apartment
       + Create apartment form
       + put new apartment button on home page
      + Delete Apartment
        TODO=> show an alert?

  + Admin screen for CRUD -> Users
    + set the paths
      + edit / delete
      + create
      + userList
    + form copmonent for edit / delete
    + form component for create
    + Users List for admin with edit buttons
      + with # of created apartments ?

  + On delete cascade test

  + Routing buttons
    + New apartment on main page 
      + For Admins and Realtor
    + New User button on Users Page
    + Fix Logout Button position
  

 + Write down components
 + Write down store  / reducers
 + Write down actions
 + KnowHow -> Show Apartments on map
  + Show map
  + Show pins
  TODO=> Make pins clickable / show popover info
-------------
EXTRAS:
  - Sorting 
  - deploy
  TODO=> tests
  + Code refactor
    + server
    + client
      + Extract styles into own files
  + Put back navigation buttons for :
    + UsersList
  - Fix heights
  - Find better markers
  + migrations
-------------
Backend
 Entities
 - Draw out entity relationShips
  + User entity
    + JWT Token
    + id : unique
    + username - email
    + User Type - Client / Realtor / Admin 
      + Api endpoint checks the userType 
      - TODO: Make sure DB doesn't accept anything else. => Create interface or customType
    + password : string

    + Authentication decorator
      + Simple implementation setup. 
      + Check if logged in
    + Authorization decorator
      + Simple implementation setup. 
      + Check if authorized to access resource

  + Apartment Entity
    + id: unique
    + name : String
    + description
    + floor area size
    + price per month
    + number of rooms
    + valid geolocation coordinates
      + Find the appropriate data type from googlemaps Api
      + Set in the DB
    + date added
    + associated realtor (ManyToOne)
    + Available?
 + Implement Entities
  + Cascade delete options for deletion of a realtor -> Does the apartments of the realtor go away? -> Yes
 
 Controllers
 + Login / Logout / SignUp Controllers
  + Password check / use bcyrpt
  + Return JWT Token for authentication
  + Check if all data provided are valid
  + Login / SignUp / Logout
    + SignUp
    + Login
      + Simple Login
      + Login with token
  + Logout
  + Delete User
    + Only Admin
  + Edit User
    + Only Admin
 + Apartments
  + Create Apartment
    + Check authorization
  + Get All Apartments
    + Either filterable, or a separate endpoint / decide on this. => filterable
    + Filter based on query params,
      + Make sure query params are of the right type
    + filter based on userType
      + If client => only availables
      + If Other => All
  + Delete Apartment
    + Check credentials / check authorization
  + Edit Apartment
    + Check credentials / check authorization
 
 + Implement Entity Rest Api Controllers
 - Test
