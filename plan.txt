Phase1 - Backend

 + SetUp TypeScript
 + SetUp Koa Server
 + SetUp Postgres / Docker
 + SetUp TypeORM

Phase2 - Client

 + SetUp React - App
 + Add redux / redux thunk - superagent - redux-devtools
 - Design Layout
  - Login / SignUp Page
    + Check if JWT expired and redirect to login!
    + Form simple layout and simple functionality
    + Form actual signup / login process
    + Form layout fix in grid
    - Login / Signup success process
      + Redirect to another page
      + Handle enter button submit. 
      + Show the logout button
        +implement logout functionality
          + redirect to login page after logout
          + clear user JWT data
      + SHow the user name and user type
        + Create an api enpoint to get current user details
    + Client code refactor
  - Apartmens / Maps Layout
    + Create path on the client side
    + Design layout with grid structure
    - Create components for
      + list
        + Create cards for each apartment
        + Make cards snap on to list with grid
        + make pagination => pagination on server side
      + Map
        - Make map start focus on the average of pins
        + Learn to show a map on react
        + Show the map
        + show the markers
          - Show differnt color if not available
      - Add / Edit Apartments
        - Fix button position on card
        - Check user type eligibility
          - If client, send to logout
          - Else show apartment details
            - Edit Button makes form data editable
            - Edit button summons save button
            - Delete button alerts and then deletes, and then sends the user back to apartments
    - Filtering -> Decide server side or client side. -> Server Side better
      + Make sure only 5 apartents are returned from backend
      + Take filtering options in backend (default by ID reversed)
      + Put- filtering dropdown menus - buttons - input fields
        + size
          + 0 - 50m2
          + 51 - 100m2
          + 101 - 150m2
          + 151 + m2 
        + price
          + 0 - 500 €
          + 501 - 1000 €
          + 1000 - 1500€
          + 1501+ ‹ 
        + number of rooms
          + 0-1
          + 2-3
          + 3+
  - Edit / Delete / Create Apartment screen
      + Set the path
      + Form Component for edit / delete
        + redirect from list
        + Display the form
          + name 
          + description 
          + floor_area_size 
          + price_per_month 
          + number_of_rooms 
          + available 
          + lat  
          + lon
        + Show it prefilled
        + Validations on input
        + Cancel button sends back to list
        + After save, cancel button becomes back to list
      - Create Apartment
       + Create apartment form
       - put new apartment button on home page
      + Delete Apartment
        ? show an alert?

  HERE=> Admin screen for CRUD -> Users
    + set the paths
      + edit / delete
      + create
      + userList
    + form copmonent for edit / delete
    + form component for create
    - Users List for admin with edit buttons
      - with # of created apartments ?


 - Write down components
 - Write down store  / reducers
 - Write down actions
 - KnowHow -> Show Apartments on map
  + Show map
  + Show pins
  - Make pins clickable / show popover info
-------------
EXTRAS:
  - Sorting 
-------------
Backend
 Entities
 - Draw out entity relationShips
  + User entity
    + JWT Token
    + id : unique
    + username - email
    + User Type - Client / Realtor / Admin 
      + Api endpoint checks the userType 
      - TODO: Make sure DB doesn't accept anything else. => Create interface or customType
    + password : string

    - Authentication decorator
      + Simple implementation setup. 
      + Check if logged in
    - Authorization decorator
      + Simple implementation setup. 
      + Check if authorized to access resource

  - Apartment Entity
    + id: unique
    + name : String
    + description
    + floor area size
    + price per month
    + number of rooms
    + valid geolocation coordinates
      + Find the appropriate data type from googlemaps Api
      + Set in the DB
    + date added
    + associated realtor (ManyToOne)
    + Available?
 - Implement Entities
  - Cascade delete options for deletion of a realtor -> Does the apartments of the realtor go away? -> Yes
 
 Controllers
 - Login / Logout / SignUp Controllers
  + Password check / use bcyrpt
  + Return JWT Token for authentication
  + Check if all data provided are valid
  - Login / SignUp / Logout
    + SignUp
    + Login
      + Simple Login
      + Login with token
  - Logout
  + Delete User
    + Only Admin
  + Edit User
    + Only Admin
 + Apartments
  + Create Apartment
    + Check authorization
  + Get All Apartments
    + Either filterable, or a separate endpoint / decide on this. => filterable
    + Filter based on query params,
      + Make sure query params are of the right type
    + filter based on userType
      + If client => only availables
      + If Other => All
  + Delete Apartment
    + Check credentials / check authorization
  + Edit Apartment
    + Check credentials / check authorization
 - GeoLocation 
  - Should this be a sepeare endPoint ? Or during the creation of the entity?
  - If seperate implement and test. 
 + Implement Entity Rest Api Controllers
 - Test


----------------------------------------------
Rubrick
----------------------------------------------
The requirements for the test project are:
Write an application that manages apartment rentals

- Users must be able to create an account and log in. (If a mobile application, this means that multiple users can use the app from the same phone).
- Implement a client role:
   * Clients are able to browse rentable apartments in a list and on a map.
- Implement a realtor role:
   * Realtors would be able to browse all rentable- and already rented apartments in a list and on a map.
   * Realtors would be able to CRUD all apartments and set the apartment state to available/rented.
- Implement an admin role:
   * Admins would be able CRUD all apartments, realtors, and clients.
- When an apartment is added, each new entry must have a 
  - name, description, floor area size, price per month, number of rooms, valid geolocation coordinates, date added and an associated realtor.
    - Geolocation coordinates should be added either by providing latitude/longitude directly or through address geocoding (https://developers.google.com/maps/documentation/javascript/geocoding).
- All users should be able to filter the displayed apartments by size, price, and the number of rooms.
- REST API. 
  - Make it possible to perform all user actions via the API, including authentication (If a mobile application and you don’t know how to create your own backend you can use Firebase.com or similar services to create the API).
  - In both cases, you should be able to explain how a REST API works and demonstrate that by creating functional tests that use the REST Layer directly. Please be prepared to use REST clients like Postman, cURL, etc. for this purpose.

- If it’s a web application, it must be a single-page application. All actions need to be done client side using AJAX, refreshing the page is not acceptable. (If a mobile application, disregard this).
- Functional UI/UX design is needed. You are not required to create a unique design, however, do follow best practices to make the project as functional as possible.
Bonus: unit and e2e tests.
