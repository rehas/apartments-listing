Phase1 - Backend

 + SetUp TypeScript
 + SetUp Koa Server
 + SetUp Postgres / Docker
 + SetUp TypeORM

Phase2 - Client

 - SetUp React - App
 - Add redux / redux thunk - superagent - redux-devtools
 - Design Layout
  - Apartmens / Maps Layout
    - Filtering -> Decide server side or client side. -> Server Side better
  - Edit / Delete / Create Apartment screen
  - Admin screen for CRUD -> Users

 - Write down components
 - Write down store  / reducers
 - Write down actions
 - KnowHow -> Show Apartments on map
  - Show map
  - Show pins
  - Make pins clickable / show popover info
-------------

Backend
 Entities
 - Draw out entity relationShips
  - User entity
    + JWT Token
    + id : unique
    + username - email
    + User Type - Client / Realtor / Admin 
      + Api endpoint checks the userType 
      - TODO: Make sure DB doesn't accept anything else. => Create interface or customType
    + password : string

    - Authentication decorator
      + Simple implementation setup. 
      - Check if logged in
    - Authorization decorator
      + Simple implementation setup. 
      - Check if authorized to access resource

  HERE=> Apartment Entity
    + id: unique
    + name : String
    + description
    + floor area size
    + price per month
    + number of rooms
    - valid geolocation coordinates
    + date added
    + associated realtor (ManyToOne)
    + Available?
 - Implement Entities
  - Cascade delete options for deletion of a realtor -> Does the apartments of the realtor go away? -> Yes
 
 Controllers
 - Login / Logout / SignUp Controllers
  + Password check / use bcyrpt
  + Return JWT Token for authentication
  + Check if all data provided are valid
  - Login / SignUp / Logout
    + SignUp
    + Login
      + Simple Login
      + Login with token
  - Logout
  + Delete User
    + Only Admin
  + Edit User
    + Only Admin
 - Apartments
  + Create Apartment
    + Check authorization
  + Get All Apartments
    + Either filterable, or a separate endpoint / decide on this. => filterable
    + Filter based on query params,
      + Make sure query params are of the right type
    + filter based on userType
      + If client => only availables
      + If Other => All
  + Delete Apartment
    + Check credentials / check authorization
  + Edit Apartment
    + Check credentials / check authorization
 - GeoLocation 
  - Should this be a sepeare endPoint ? Or during the creation of the entity?
  - If seperate implement and test. 
 - Implement Entity Rest Api Controllers
 - Test


----------------------------------------------
Rubrick
----------------------------------------------
The requirements for the test project are:
Write an application that manages apartment rentals

- Users must be able to create an account and log in. (If a mobile application, this means that multiple users can use the app from the same phone).
- Implement a client role:
   * Clients are able to browse rentable apartments in a list and on a map.
- Implement a realtor role:
   * Realtors would be able to browse all rentable- and already rented apartments in a list and on a map.
   * Realtors would be able to CRUD all apartments and set the apartment state to available/rented.
- Implement an admin role:
   * Admins would be able CRUD all apartments, realtors, and clients.
- When an apartment is added, each new entry must have a 
  - name, description, floor area size, price per month, number of rooms, valid geolocation coordinates, date added and an associated realtor.
    - Geolocation coordinates should be added either by providing latitude/longitude directly or through address geocoding (https://developers.google.com/maps/documentation/javascript/geocoding).
- All users should be able to filter the displayed apartments by size, price, and the number of rooms.
- REST API. 
  - Make it possible to perform all user actions via the API, including authentication (If a mobile application and you don’t know how to create your own backend you can use Firebase.com or similar services to create the API).
  - In both cases, you should be able to explain how a REST API works and demonstrate that by creating functional tests that use the REST Layer directly. Please be prepared to use REST clients like Postman, cURL, etc. for this purpose.

- If it’s a web application, it must be a single-page application. All actions need to be done client side using AJAX, refreshing the page is not acceptable. (If a mobile application, disregard this).
- Functional UI/UX design is needed. You are not required to create a unique design, however, do follow best practices to make the project as functional as possible.
Bonus: unit and e2e tests.
